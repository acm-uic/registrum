name: CI

on:
  push:
  create:
  release:
  pull_request:
  workflow_dispatch:

jobs:
  build-test-node:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Restore Package Cache
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install yarn
        run: npm i -g yarn
      - name: Install dependencies
        run: yarn install
      - name: Build projects
        run: yarn build
      - name: Run tests
        run: yarn test
      - name: Publish coverage
        run: yarn coverage

  build-push-docker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: [api, banner, banner-data, client]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v3
      - name: Pull base images
        run: |
          docker pull node:12-alpine
          docker pull nginx:alpine
      - name: Docker Login
        if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master'
        env:
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
          REGISTRY_HOST: ${{ secrets.REGISTRY_HOST }}
        run: |
          echo "${REGISTRY_PASSWORD}" | docker login ${REGISTRY_HOST} --username "${REGISTRY_USERNAME}" --password-stdin
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.project }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx
      - name: Docker Buildx
        env:
          REGISTRY_HOST: ${{ secrets.REGISTRY_HOST }}
        run: |
          PUSH=false
          VERSION=temp
          DOCKER_IMAGE=${REGISTRY_HOST}/${{ github.repository }}-${{ matrix.project }}
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            PUSH=true
          fi
          if [[ $GITHUB_REF == refs/heads/master ]]; then
            VERSION=master
            PUSH=true
          fi
          TAGS="--tag ${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS --tag ${DOCKER_IMAGE}:latest"
          fi
          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --output "type=image,push=${PUSH}" \
            --platform linux/amd64 \
            ${TAGS} ${{ matrix.project }}

  trigger-hooks:
    runs-on: ubuntu-latest
    needs:
      - build-push-docker
    steps:
      - name: Trigger Hooks - master
        if: github.ref == 'refs/heads/master'
        run: |
          curl -X POST -H "Content-Type: application/json" -d "{}" '${{ secrets.MASTER_HOOK }}'

      - name: Trigger Hooks - staging
        if: github.ref == 'refs/heads/staging'
        run: |
          curl -X POST -H "Content-Type: application/json" -d "{}" '${{ secrets.STAGING_HOOK }}'

      - name: Trigger Hooks - release
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          curl -X POST -H "Content-Type: application/json" -d "{}" '${{ secrets.PROD_HOOK }}'
