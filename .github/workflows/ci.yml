name: CI

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches: main
  workflow_dispatch:

jobs:
  build-test-node:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v2.1.3
        with:
          node-version: 14.x
      - name: Restore Package Cache
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install yarn
        run: npm i -g yarn
      - name: Install dependencies
        run: yarn install
      - name: Build projects
        run: yarn build
      - name: Run tests
        run: yarn test
      - name: Publish coverage
        run: yarn coverage

  build-push-docker:
    runs-on: ubuntu-latest
    needs:
      - build-test-node
    strategy:
      fail-fast: false
      matrix:
        project: [api, banner, banner-data, client]
    steps:
      - uses: actions/checkout@v2
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=${{ secrets.REGISTRY_HOST }}/${{ github.repository }}/${{ matrix.project }}
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login docker registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_HOST }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v2
        with:
          build-args: CLIENT_WEBPUSHPUBLIC=${{ secrets.WEBPUSHPUBLIC }}
          context: .
          file: docker/${{ matrix.project }}.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  trigger-hooks:
    runs-on: ubuntu-latest
    needs:
      - build-push-docker
    steps:
      - name: Trigger Hooks - main
        if: github.ref == 'refs/heads/main'
        run: |
          curl -X POST -H "Content-Type: application/json" -d "{}" '${{ secrets.EDGE_HOOK }}'
      - name: Trigger Hooks - release
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          curl -X POST -H "Content-Type: application/json" -d "{}" '${{ secrets.PROD_HOOK }}'
