// This optional code is used to register a service worker.
// register() is not called by default.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on subsequent visits to a page, after all the
// existing tabs open on the page have been closed, since previously cached
// resources are updated in the background.

// To learn more about the benefits of this model and instructions on how to
// opt-in, read https://bit.ly/CRA-PWA

const applicationServerPublicKey = 'BK_0D9VS_RrjJh3BRbdBifq6Ump45KpzfwWxk6P6sVOSTcrc89TzWlgtM1f7R7hOiKQsOxZHlGNGRiex02n9-9g';

// * this will ask the user for permission using a browser pop up
async function askUserPermission() {
    console.log("in askUserPermission")
    return await Notification.requestPermission();
}

// * converting public key
function urlB64ToUint8Array(base64String: string | any[]) {
    const padding = '='.repeat((4 - base64String.length % 4) % 4);
    const base64 = (base64String + padding)
      .replace(/\-/g, '+')
      .replace(/_/g, '/');
  
    const rawData = window.atob(base64);
    const outputArray = new Uint8Array(rawData.length);
  
    for (let i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
}

//! fixme: add the correct typescript for subscription
function updateSubscriptionOnServer(subscription: any) {

    console.log('Subscription object is: ' + subscription);

    // TODO: post request --> Send subscription to application server using application server keys generated by web push npm library

    //! fixme: ensure this api route URL is implemented & correct
    return fetch('http://localhost:4001/api/save-client-subscriptions/', {
        method: 'POST',
        headers: {
        'Content-Type': 'application/json'
        },
        body: JSON.stringify(subscription)
    })
    .then(function(response) {
        if (!response.ok) {
        throw new Error('Bad status code from server.');
        }

        return response.json();
    })
    .then(function(responseData) {
        if (!(responseData.data && responseData.data.success)) {
        throw new Error('Bad response from server.');
        }
    });
    
    // TODO: write some code that enables and disables button on the front end that subscribes user for push notifications
}
  
function subscribeUserWithLogin(swRegistration: ServiceWorkerRegistration ) {
    const applicationServerKey = urlB64ToUint8Array(applicationServerPublicKey);
    swRegistration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: applicationServerKey
    })
    .then(function(subscription) {
        console.log('User is subscribed.');
        const subscriptionObject = JSON.stringify(subscription);
        console.log('Subscription object saving to localStorage: ' + subscriptionObject);

        //! FIXME: needs to grab this before user logs in will it even be accessible by the time login api request is made cause service worker might take time to register?
        //* possible solution: use a promise when registering service worker and wait till its done so that subscriptionObject from localStorage so it can be sent w/ login route
        localStorage.setItem("subscriptionObject", subscriptionObject);

    })
    .catch(function(err: any) {
        console.log('Failed to subscribe the user: ', err);
    });
}  

function subscribeUser(swRegistration: ServiceWorkerRegistration ) {
  const applicationServerKey = urlB64ToUint8Array(applicationServerPublicKey);
  swRegistration.pushManager.subscribe({
    userVisibleOnly: true,
    applicationServerKey: applicationServerKey
  })
  .then(function(subscription) {
    console.log('User is subscribed.');
    const subscriptionObject = JSON.stringify(subscription);
    console.log('Subscription object is: ' + subscriptionObject);

    updateSubscriptionOnServer(subscriptionObject);
    // isSubscribed = true;
  })
  .catch(function(err: any) {
    console.log('Failed to subscribe the user: ', err);
  });
}

function initializeUI(swRegistration: ServiceWorkerRegistration) {
    // Set the initial subscription value
    swRegistration.pushManager.getSubscription()
    .then(function(subscription) {
      const isSubscribed = !(subscription === null);
  
      if (isSubscribed) {
        console.log('User IS subscribed.');
      } else {
        console.log('User is NOT subscribed.');

        // * ask for permission since user is not subscribed

        askUserPermission().then(consent => {
            // * check if user allows or blocks push notifications

            if (consent !== "granted") {
                //* user denied permission
                //TODO: unsubscribe user on the server --> delete them from the database
            }else{
                //* user approved permission
                subscribeUser(swRegistration);
            }

        });



      }
  
    });
}


const isLocalhost = Boolean(
    window.location.hostname === 'localhost' ||
        // [::1] is the IPv6 localhost address.
        window.location.hostname === '[::1]' ||
        // 127.0.0.0/8 are considered localhost for IPv4.
        window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)
)

type Config = {
    onSuccess?: (registration: ServiceWorkerRegistration) => void
    onUpdate?: (registration: ServiceWorkerRegistration) => void
}

function registerValidSW(swUrl: string, config?: Config) {
    navigator.serviceWorker
        .register(swUrl)
        .then(registration => {

            console.log('Service Worker is registered', registration);

            initializeUI(registration);

            registration.onupdatefound = () => {
                const installingWorker = registration.installing
                if (installingWorker == null) {
                    return
                }
                installingWorker.onstatechange = () => {
                    if (installingWorker.state === 'installed') {
                        if (navigator.serviceWorker.controller) {
                            // At this point, the updated precached content has been fetched,
                            // but the previous service worker will still serve the older
                            // content until all client tabs are closed.
                            console.log(
                                'New content is available and will be used when all ' +
                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'
                            )

                            // Execute callback
                            if (config && config.onUpdate) {
                                config.onUpdate(registration)
                            }
                        } else {
                            // At this point, everything has been precached.
                            // It's the perfect time to display a
                            // "Content is cached for offline use." message.
                            console.log('Content is cached for offline use.')

                            // Execute callback
                            if (config && config.onSuccess) {
                                config.onSuccess(registration)
                            }
                        }
                    }
                }
            }
        })
        .catch(error => {
            console.error('Error during service worker registration:', error)
        })
}

function checkValidServiceWorker(swUrl: string, config?: Config) {
    // Check if the service worker can be found. If it can't reload the page.
    fetch(swUrl, {
        headers: { 'Service-Worker': 'script' }
    })
        .then(response => {
            // Ensure service worker exists, and that we really are getting a JS file.
            const contentType = response.headers.get('content-type')
            if (
                response.status === 404 ||
                (contentType != null && contentType.indexOf('javascript') === -1)
            ) {
                // No service worker found. Probably a different app. Reload the page.
                navigator.serviceWorker.ready.then(registration => {
                    registration.unregister().then(() => {
                        window.location.reload()
                    })
                })
            } else {
                // Service worker found. Proceed as normal.
                registerValidSW(swUrl, config)
            }
        })
        .catch(() => {
            console.log('No internet connection found. App is running in offline mode.')
        })
}

function finishRegisteration(swUrl: string){

    console.log("in finishRegisteration");
    
    navigator.serviceWorker.register(swUrl).then(registration => {

        console.log('Service Worker is registered during login', registration);
        subscribeUserWithLogin(registration)

    }).catch(error => {
        console.error('Error during service worker registration with login:', error)
    });

}

export function registerWithLogin(){

    if ('serviceWorker' in navigator ) {
        
        console.log('Service Worker is supported');

        let swUrl = `${process.env.PUBLIC_URL}/service-worker.js`

        if (isLocalhost) {
            swUrl = `./service-worker.js`
            finishRegisteration(swUrl)
        } else {
            // Is not localhost. Just register service worker
            finishRegisteration(swUrl)
        }

    }else{
        console.log('statement not true')
    }

}

//! FIXME: need to get rid of production statement
export function register(config?: Config) {

    if ('serviceWorker' in navigator ) {
        
        console.log('Service Worker is supported');

        // The URL constructor is available in all browsers that support SW.
        const publicUrl = new URL(process.env.PUBLIC_URL || '', window.location.href)
        if (publicUrl.origin !== window.location.origin) {
            // Our service worker won't work if PUBLIC_URL is on a different origin
            // from what our page is served on. This might happen if a CDN is used to
            // serve assets; see https://github.com/facebook/create-react-app/issues/2374
            return
        }

        window.addEventListener('load', () => {
            let swUrl = `${process.env.PUBLIC_URL}/service-worker.js`

            if (isLocalhost) {

                swUrl = `./service-worker.js`

                console.log("in localhost")

                // This is running on localhost. Let's check if a service worker still exists or not
                checkValidServiceWorker(swUrl, config)

                // Add some additional logging to localhost, pointing developers to the
                // service worker/PWA documentation.
                navigator.serviceWorker.ready.then(() => {
                    console.log(
                        'This web app is being served cache-first by a service ' +
                            'worker. To learn more, visit https://bit.ly/CRA-PWA'
                    )
                })
            } else {
                // Is not localhost. Just register service worker
                registerValidSW(swUrl, config)
            }
        })
    }else{
        console.log('statement not true')
    }
}

export function unregister() {
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.ready
            .then(registration => {
                registration.unregister()
            })
            .catch(error => {
                console.error(error.message)
            })
    }
}
